#!/usr/bin/env python

#   0 left_front
#   1 left_back
#   2 right_front
#   3 right_back

import roslib
import rospy
from geometry_msgs.msg import Twist
from trimode_control.msg import FloatList
import PID

pwms = FloatList()

def _clip(value, minimum, maximum):
    """Ensure value is between minimum and maximum."""

    if value < minimum:
        return minimum
    elif value > maximum:
        return maximum
    return value
        
class Driver:
    def __init__(self):
    
        # Setup publisher
        self.pub = rospy.Publisher('pwms', FloatList, queue_size=10)
        
        rospy.init_node('driver')

        self._last_received_cmd = rospy.get_time()
        self._last_received_fb = rospy.get_time()
        self._timeout = rospy.get_param('~timeout', 0.2)
        self._rate = rospy.get_param('~rate', 100)
        
        self._max_wheel_speed = rospy.get_param('~max_wheel_radpersec', 1.36) 
        self._wheel_base = rospy.get_param('~wheel_base', 0.565)
        self._wheel_radius = rospy.get_param('~wheel_radius', 0.13)
       
        self._left_front_speed = 0
        self._left_back_speed = 0
        self._right_front_speed = 0
        self._right_back_speed = 0
        
        self.encoder_speeds = [0, 0, 0, 0]
        
        self.P = 1.2
        self.I = 1
        self.D = 0.001
        
        self.pid_left_front = PID.PID(self.P, self.I, self.D)
        self.pid_left_back = PID.PID(self.P, self.I, self.D)
        self.pid_right_front = PID.PID(self.P, self.I, self.D)
        self.pid_right_back = PID.PID(self.P, self.I, self.D) 
        
        self.init_PID()     
                        
        # Setup subscriber for velocity twist message
        rospy.Subscriber(
            'trimode_velocity_controller/cmd_vel', Twist, self.cmd_vel_callback)
        
        # Setup subscriber for velocity twist message
        rospy.Subscriber(
            'encoder_vel', FloatList, self.encoder_vel_callback)                 
    
    def init_PID(self):
        self.pid_left_front.SetPoint = 0
        self.pid_left_back.SetPoint = 0
        self.pid_right_front.SetPoint = 0
        self.pid_right_back.SetPoint = 0
        
        self.pid_left_front.setSampleTime(0.01)
        self.pid_left_back.setSampleTime(0.01)
        self.pid_right_front.setSampleTime(0.01)
        self.pid_right_back.setSampleTime(0.01)
        
    def update_PID(self):   
        self.pid_left_front.SetPoint = self._left_front_speed
        self.pid_left_back.SetPoint = self._left_back_speed
        self.pid_right_front.SetPoint = self._right_front_speed
        self.pid_right_back.SetPoint = self._right_back_speed
        self.pid_left_front.update(self.encoder_speeds[0])
        self.pid_left_back.update(self.encoder_speeds[1])
        self.pid_right_front.update(self.encoder_speeds[2])
        self.pid_right_back.update(self.encoder_speeds[3])
        rospy.logwarn("encoder left back: %.4f", self.encoder_speeds[1])
        rospy.logwarn("cmd_vel left back: %.4f", self._left_back_speed)        
        rospy.logwarn("error left front: %.2f", ((self.encoder_speeds[1] - self._left_back_speed) / (self._left_back_speed+0.00001)) * 100.0) 
                    
    def compute_pwm(self, wheel_vel):
        # find out if there;s another way other than trial and error!
        pwm = min(max(1.03 * (wheel_vel / self._max_wheel_speed)  * 256, -200), 200)
        pwms.data.append(pwm)        
               
    def cmd_vel_callback(self, message):
        """Handle new velocity command message."""

        self._last_received_cmd = rospy.get_time()

        # Extract linear and angular velocities from the message
        linear = message.linear.x
        angular = message.angular.z

        # Calculate wheel speeds in rad/s
        self._right_front_speed = (linear + angular * self._wheel_base/2) / (self._wheel_radius * 2 * 3.1415)
        self._right_back_speed = (linear + angular * self._wheel_base/2) / (self._wheel_radius * 2 * 3.1415)
        self._left_front_speed = (linear - angular * self._wheel_base/2) / (self._wheel_radius * 2 * 3.1415)
        self._left_back_speed = (linear - angular * self._wheel_base/2) / (self._wheel_radius * 2 * 3.1415)               

    def encoder_vel_callback(self, msg):
        """Handle new encoder message."""

        # Get timestamp to check consistency.
        self._last_received_fb = rospy.get_time()

        # Extract wheel speeds in rad/s.
        self.encoder_speeds = msg.data
        
    def run(self):
        """The control loop of the driver."""

        rate = rospy.Rate(self._rate)

        while not rospy.is_shutdown():
            # If we haven't received new commands for a while, we
            # may have lost contact with the commander-- stop
            # moving
            
            # Empty array to be published
            pwms.data = []
            
            delay_cmd = rospy.get_time() - self._last_received_cmd
            delay_fb = rospy.get_time() - self._last_received_fb
            if delay_cmd > self._timeout or delay_fb > self._timeout:
                rospy.logwarn("timeout")
                self.compute_pwm(0)        
                self.compute_pwm(0)
                self.compute_pwm(0)
                self.compute_pwm(0)
            else:
                self.update_PID() 
                rospy.logwarn("debug: %.2f", self.pid_left_back.output)                               
                self.compute_pwm(self.pid_left_front.output)       
               # self.compute_pwm(self._left_back_speed)
                self.compute_pwm(self.pid_left_back.output)        
                self.compute_pwm(self.pid_right_front.output)        
                self.compute_pwm(self.pid_right_back.output)  
            # Publish pwms
            pwms.data[0] = 0
            pwms.data[2] = 0
            pwms.data[3] = 0
            self.pub.publish(pwms)
            
            rate.sleep()

def main():
    driver = Driver()
    
    # Run driver. This will block
    driver.run()

if __name__ == '__main__':
    main()
