#!/usr/bin/env python

# 0 left_back
# 1 right_back
# 2 left_front
# 3 right_front

import rospy
from trimode_control.msg import FloatList
from sensor_msgs.msg import Joy

#import RPi.GPIO as GPIO


# Set the GPIO modes
#GPIO.setmode(GPIO.BCM)
#GPIO.setwarnings(False)

_FREQUENCY = 20

pwm = FloatList()

def _clip(value, minimum, maximum):
    """Ensure value is between minimum and maximum."""

    if value < minimum:
        return minimum
    elif value > maximum:
        return maximum
    return value
        
class Driver:
    def __init__(self):
    
        # Setup publisher
        self.pub = rospy.Publisher('pwms_wheel', FloatList, queue_size=10)
        
        rospy.init_node('wheel_transf')

        self._last_received = rospy.get_time()
        self._timeout = rospy.get_param('~timeout', 2)
        self._rate = rospy.get_param('~rate', 10)
        self._max_speed = rospy.get_param('~max_speed', 0.25)

        # Setup subscriber for joy message
        rospy.Subscriber(
            'joy', Joy, self.velocity_received_callback)                        
              
    def velocity_received_callback(self, msg):
        """Handle new velocity command message."""

        self._last_received = rospy.get_time()

        # Extract direction
        if msg.buttons[6]==1:
          direction = -1      # backwards
        elif msg.buttons[7]==1:
          direction = 1       # forward
        else:
          direction = 0       # if no enable button is not pressed keep it 0 
          
        # Extract wheel index
        wheel_idx = -1
        if msg.buttons[4]==1:
          wheel_idx = 0
        if msg.buttons[5]==1:
          wheel_idx = 1
        if msg.axes[2]==-1:
          wheel_idx = 2
        if msg.axes[5]==-1:
          wheel_idx = 3
          
        # Build vector
        pwm.data = (wheel_idx, direction * 70)    
        
        #self._left_front_speed_percent = (100 * left_front_speed/self._max_speed)
        #self._left_back_speed_percent = (100 * left_back_speed/self._max_speed)
        #self._right_front_speed_percent = (100 * right_front_speed/self._max_speed)
        #self._right_back_speed_percent = (100 * right_back_speed/self._max_speed)
        
        

    def run(self):
        """The control loop of the driver."""

        rate = rospy.Rate(self._rate)

        while not rospy.is_shutdown():
            # If we haven't received new commands for a while, we
            # may have lost contact with the commander-- stop
            # moving
            
            delay = rospy.get_time() - self._last_received
            if delay > self._timeout:
                pwm.data = (-1,0)
            
            # Publish pwms
            self.pub.publish(pwm)
            
            rate.sleep()

def main():
    driver = Driver()
    
    # Run driver. This will block
    driver.run()

if __name__ == '__main__':
    main()
